"""
This type stub file was generated by pyright.
"""

import typing
import numbers
from typing_extensions import Literal
from dash.development.base_component import Component, _explicitize_args

class Colorbar(Component):
    """A Colorbar component.
Color bar control component for Leaflet. Most of the functionality is
delegated to chroma-js (see the docs for that module). For creating your
own color schemes for maps, have a look at http://colorbrewer2.org.

Keyword arguments:

- id (string; optional):
    Unique ID to identify this component in Dash callbacks.

- className (string; optional):
    Any CSS classes to appy.

- classes (number | list of numbers; optional):
    The number or positions of discrete classes in the colorbar. If
    not set the colorbar will be continuous, which is the default.

- colorscale (string | list of strings; optional):
    Chroma-js colorscale. Either a colorscale name, e.g. \"Viridis\",
    or a list of colors, e.g. [\"black\", \"#fdd49e\",
    \"rgba(255,0,0,0.35)\"]. The predefined colorscales are listed
    here:
    https://github.com/gka/chroma.js/blob/master/src/colors/colorbrewer.js.

- height (number; optional):
    Height in pixels.

- loading_state (dict; optional):
    Dash loading state information.

- max (number; optional):
    Domain maximum of the colorbar. Translates to the last color of
    the colorscale.

- min (number; optional):
    Domain minimum of the colorbar. Translates to the first color of
    the colorscale.

- nTicks (number; optional):
    Number of ticks on the colorbar.

- opacity (number; optional):
    Opacity of the colorbar. Use it to match the perceived colors from
    an overlay with opacity.

- position (a value equal to: 'topleft', 'topright', 'bottomleft', 'bottomright'; optional):
    Map control position.

- tickDecimals (number; optional):
    If set, fixes the tick decimal points to the given number.

- tickText (list of numbers; optional):
    If set, this text will be used instead of the data values.

- tickValues (list of numbers; optional):
    If set, these values are used for ticks (rather than the ones
    genrated based on nTicks).

- tooltip (boolean; optional):
    If True, the value will be shown as tooltip on hover.

- unit (string; optional):
    Optional text to append to the colorbar ticks.

- width (number; optional):
    Width in pixels."""
    _children_props = ...
    _base_nodes = ...
    _namespace = ...
    _type = ...
    @_explicitize_args
    def __init__(self, position: typing.Optional[Literal["topleft", "topright", "bottomleft", "bottomright"]] = ..., opacity: typing.Optional[typing.Union[int, float, numbers.Number]] = ..., className: typing.Optional[str] = ..., colorscale: typing.Optional[typing.Union[str, typing.Sequence[str]]] = ..., width: typing.Optional[typing.Union[int, float, numbers.Number]] = ..., height: typing.Optional[typing.Union[int, float, numbers.Number]] = ..., min: typing.Optional[typing.Union[int, float, numbers.Number]] = ..., max: typing.Optional[typing.Union[int, float, numbers.Number]] = ..., classes: typing.Optional[typing.Union[typing.Union[int, float, numbers.Number], typing.Sequence[typing.Union[int, float, numbers.Number]]]] = ..., unit: typing.Optional[str] = ..., nTicks: typing.Optional[typing.Union[int, float, numbers.Number]] = ..., tickDecimals: typing.Optional[typing.Union[int, float, numbers.Number]] = ..., tickValues: typing.Optional[typing.Sequence[typing.Union[int, float, numbers.Number]]] = ..., tickText: typing.Optional[typing.Sequence[typing.Union[int, float, numbers.Number]]] = ..., tooltip: typing.Optional[bool] = ..., style: typing.Optional[typing.Any] = ..., id: typing.Optional[typing.Union[str, dict]] = ..., loading_state: typing.Optional[dict] = ..., **kwargs) -> None:
        ...
    


