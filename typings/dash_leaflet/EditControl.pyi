"""
This type stub file was generated by pyright.
"""

import typing
import numbers
from typing_extensions import Literal, TypedDict
from dash.development.base_component import Component, _explicitize_args

class EditControl(Component):
    """An EditControl component.
EditControl.ts is based on https://github.com/alex3165/react-leaflet-draw/

Keyword arguments:

- id (string; optional):
    Unique ID to identify this component in Dash callbacks.

- action (dict; optional):
    Fires on every action.

    `action` is a dict with keys:

    - layer_type (string; required)

    - type (string; required)

    - n_actions (number; required)

- disableDefaultEventHandlers (boolean; optional):
    If set to True, default events handlers are not registered.
    [MUTABLE].

- draw (dict; optional):
    Enable/disable draw controls. See example of usage here
    https://github.com/Leaflet/Leaflet.draw#user-content-example-leafletdraw-config.

- drawToolbar (dict; optional):
    Change this prop to manipulate the drawing toolbar, i.e. to change
    modes and/or invoke actions.

    `drawToolbar` is a dict with keys:

    - mode (a value equal to: 'marker', 'polygon', 'polyline', 'rectangle', 'circle', 'circlemarker'; required)

    - action (a value equal to: 'cancel', 'finish', 'delete last point'; required)

    - n_clicks (number; required)

- edit (dict; optional):
    Enable/disable edit controls. See example of usage here
    https://github.com/Leaflet/Leaflet.draw#user-content-example-leafletdraw-config.

- editToolbar (dict; optional):
    Change this prop to manipulate the edit toolbar, i.e. to change
    modes and/or invoke actions.

    `editToolbar` is a dict with keys:

    - mode (a value equal to: 'edit', 'remove'; required)

    - action (a value equal to: 'cancel', 'save', 'clear all'; required)

    - n_clicks (number; required)

- eventHandlers (dict; optional):
    Object with keys specifying the event type and the value the
    corresponding event handlers. [MUTABLE].

- geojson (dict; default {features: []}):
    Geojson representing the current features.

    `geojson` is a dict with keys:

    - features (list of dicts; required)

- loading_state (dict; optional):
    Dash loading state information.

- position (a value equal to: 'topleft', 'topright', 'bottomleft', 'bottomright'; default 'topright'):
    Map control position."""
    _children_props = ...
    _base_nodes = ...
    _namespace = ...
    _type = ...
    Action = TypedDict("Action", { "layer_type": str,"type": str,"n_actions": typing.Union[int, float, numbers.Number] })
    DrawToolbar = TypedDict("DrawToolbar", { "mode": Literal["marker", "polygon", "polyline", "rectangle", "circle", "circlemarker"],"action": Literal["cancel", "finish", "delete last point"],"n_clicks": typing.Union[int, float, numbers.Number] })
    EditToolbar = TypedDict("EditToolbar", { "mode": Literal["edit", "remove"],"action": Literal["cancel", "save", "clear all"],"n_clicks": typing.Union[int, float, numbers.Number] })
    Geojson = TypedDict("Geojson", { "features": typing.Sequence[dict] })
    @_explicitize_args
    def __init__(self, position: typing.Optional[Literal["topleft", "topright", "bottomleft", "bottomright"]] = ..., draw: typing.Optional[dict] = ..., edit: typing.Optional[dict] = ..., action: typing.Optional[Action] = ..., drawToolbar: typing.Optional[DrawToolbar] = ..., editToolbar: typing.Optional[EditToolbar] = ..., geojson: typing.Optional[Geojson] = ..., eventHandlers: typing.Optional[dict] = ..., disableDefaultEventHandlers: typing.Optional[bool] = ..., id: typing.Optional[typing.Union[str, dict]] = ..., loading_state: typing.Optional[dict] = ..., **kwargs) -> None:
        ...
    


