"""
This type stub file was generated by pyright.
"""

import typing
import numbers
from typing_extensions import Literal, TypedDict
from dash.development.base_component import Component, _explicitize_args

class EasyButton(Component):
    """An EasyButton component.
The easiest way to add buttons with Leaflet.

Keyword arguments:

- id (string; optional):
    Unique ID to identify this component in Dash callbacks.

- clickData (dict; optional):
    An object holding data related to the click event. Typing is
    indicative.

    `clickData` is a dict with keys:

    - latlng (list of numbers; required)

    - layerPoint (list of numbers; required)

    - containerPoint (list of numbers; required)

- dblclickData (dict; optional):
    An object holding data related to the double click event. Typing
    is indicative.

    `dblclickData` is a dict with keys:

    - latlng (list of numbers; required)

    - layerPoint (list of numbers; required)

    - containerPoint (list of numbers; required)

- disableDefaultEventHandlers (boolean; optional):
    If set to True, default events handlers are not registered.
    [MUTABLE].

- eventHandlers (dict; optional):
    Object with keys specifying the event type and the value the
    corresponding event handlers. [MUTABLE].

- icon (string; required):
    The icon to show, e.g. 'fa-globe' from
    \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\".

- loading_state (dict; optional):
    Dash loading state information.

- n_clicks (number; optional):
    An integer that represents the number of times that this element
    has been clicked on.

- n_dblclicks (number; optional):
    An integer that represents the number of times that this element
    has been double-clicked on.

- position (a value equal to: 'topleft', 'topright', 'bottomleft', 'bottomright'; optional):
    Map control position.

- title (string; optional):
    Title on the button."""
    _children_props = ...
    _base_nodes = ...
    _namespace = ...
    _type = ...
    ClickData = TypedDict("ClickData", { "latlng": typing.Sequence[typing.Union[int, float, numbers.Number]],"layerPoint": typing.Sequence[typing.Union[int, float, numbers.Number]],"containerPoint": typing.Sequence[typing.Union[int, float, numbers.Number]] })
    DblclickData = TypedDict("DblclickData", { "latlng": typing.Sequence[typing.Union[int, float, numbers.Number]],"layerPoint": typing.Sequence[typing.Union[int, float, numbers.Number]],"containerPoint": typing.Sequence[typing.Union[int, float, numbers.Number]] })
    @_explicitize_args
    def __init__(self, position: typing.Optional[Literal["topleft", "topright", "bottomleft", "bottomright"]] = ..., title: typing.Optional[str] = ..., icon: typing.Optional[str] = ..., n_clicks: typing.Optional[typing.Union[int, float, numbers.Number]] = ..., clickData: typing.Optional[ClickData] = ..., id: typing.Optional[typing.Union[str, dict]] = ..., loading_state: typing.Optional[dict] = ..., eventHandlers: typing.Optional[dict] = ..., disableDefaultEventHandlers: typing.Optional[bool] = ..., n_dblclicks: typing.Optional[typing.Union[int, float, numbers.Number]] = ..., dblclickData: typing.Optional[DblclickData] = ..., **kwargs) -> None:
        ...
    


