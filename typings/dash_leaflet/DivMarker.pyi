"""
This type stub file was generated by pyright.
"""

import typing
import numbers
from typing_extensions import TypedDict
from dash.development.base_component import Component, ComponentType, _explicitize_args

class DivMarker(Component):
    """A DivMarker component.
Marker is used to display clickable/draggable icons on the map. Extends Layer.

Keyword arguments:

- children (a list of or a singular dash component, string or number; optional):
    Children [MUTABLE].

- id (string; optional):
    Unique ID to identify this component in Dash callbacks.

- alt (string; optional):
    Text for the alt attribute of the icon image. Useful for
    accessibility.

- attribution (string; optional):
    String to be shown in the attribution control, e.g. \"Â©
    OpenStreetMap contributors\". It describes the layer data and is
    often a legal obligation towards copyright holders and tile
    providers. [MUTABLE].

- autoPan (boolean; optional):
    Whether to pan the map when dragging this marker near its edge or
    not.

- autoPanOnFocus (boolean; optional):
    When True, the map will pan whenever the marker is focused (via
    e.g. pressing tab on the keyboard) to ensure the marker is visible
    within the map's bounds.

- autoPanPadding (list of numbers; optional):
    Distance (in pixels to the left/right and to the top/bottom) of
    the map edge to start panning the map.

- autoPanSpeed (number; optional):
    Number of pixels the map should pan by.

- bubblingMouseEvents (boolean; optional):
    When True, a mouse event on this layer will trigger the same event
    on the map (unless L.DomEvent.stopPropagation is used).

- clickData (dict; optional):
    An object holding data related to the click event. Typing is
    indicative.

    `clickData` is a dict with keys:

    - latlng (list of numbers; required)

    - layerPoint (list of numbers; required)

    - containerPoint (list of numbers; required)

- dblclickData (dict; optional):
    An object holding data related to the double click event. Typing
    is indicative.

    `dblclickData` is a dict with keys:

    - latlng (list of numbers; required)

    - layerPoint (list of numbers; required)

    - containerPoint (list of numbers; required)

- disableDefaultEventHandlers (boolean; optional):
    If set to True, default events handlers are not registered.
    [MUTABLE].

- draggable (boolean; optional):
    Whether the marker is draggable with mouse/touch or not.
    [MUTABLE].

- eventHandlers (dict; optional):
    Object with keys specifying the event type and the value the
    corresponding event handlers. [MUTABLE].

- iconOptions (dict; required):
    Options passed to DivIcon constructor.

    `iconOptions` is a dict with keys:

    - iconSize (number; required)

    - iconAnchor (number; required)

    - popupAnchor (number; required)

    - className (string; required)

    - html (string; required)

- interactive (boolean; optional):
    If False, the layer will not emit mouse events and will act as a
    part of the underlying map.

- keyboard (boolean; optional):
    Whether the marker can be tabbed to with a keyboard and clicked by
    pressing enter.

- loading_state (dict; optional):
    Dash loading state information.

- n_clicks (number; optional):
    An integer that represents the number of times that this element
    has been clicked on.

- n_dblclicks (number; optional):
    An integer that represents the number of times that this element
    has been double-clicked on.

- opacity (number; optional):
    The opacity of the marker. [MUTABLE].

- pane (string; optional):
    Map pane where the layer will be added.

- position (boolean | number | string | dict | list; required):
    A geographical point in (lat, lon) format. [MUTABLE].

- riseOffset (number; optional):
    The z-index offset used for the riseOnHover feature.

- riseOnHover (boolean; optional):
    If True, the marker will get on top of others when you hover the
    mouse over it.

- shadowPane (string; optional):
    Map pane where the markers shadow will be added.

- title (string; optional):
    Text for the browser tooltip that appear on marker hover (no
    tooltip by default).

- zIndexOffset (number; optional):
    By default, marker images zIndex is set automatically based on its
    latitude. Use this option if you want to put the marker on top of
    all others (or below), specifying a high value like 1000 (or high
    negative value, respectively). [MUTABLE]."""
    _children_props = ...
    _base_nodes = ...
    _namespace = ...
    _type = ...
    IconOptions = TypedDict("IconOptions", { "iconSize": typing.Union[int, float, numbers.Number],"iconAnchor": typing.Union[int, float, numbers.Number],"popupAnchor": typing.Union[int, float, numbers.Number],"className": str,"html": str })
    ClickData = TypedDict("ClickData", { "latlng": typing.Sequence[typing.Union[int, float, numbers.Number]],"layerPoint": typing.Sequence[typing.Union[int, float, numbers.Number]],"containerPoint": typing.Sequence[typing.Union[int, float, numbers.Number]] })
    DblclickData = TypedDict("DblclickData", { "latlng": typing.Sequence[typing.Union[int, float, numbers.Number]],"layerPoint": typing.Sequence[typing.Union[int, float, numbers.Number]],"containerPoint": typing.Sequence[typing.Union[int, float, numbers.Number]] })
    @_explicitize_args
    def __init__(self, children: typing.Optional[typing.Union[str, int, float, ComponentType, typing.Sequence[typing.Union[str, int, float, ComponentType]]]] = ..., position: typing.Optional[typing.Any] = ..., opacity: typing.Optional[typing.Union[int, float, numbers.Number]] = ..., interactive: typing.Optional[bool] = ..., bubblingMouseEvents: typing.Optional[bool] = ..., attribution: typing.Optional[str] = ..., pane: typing.Optional[str] = ..., keyboard: typing.Optional[bool] = ..., title: typing.Optional[str] = ..., alt: typing.Optional[str] = ..., zIndexOffset: typing.Optional[typing.Union[int, float, numbers.Number]] = ..., riseOnHover: typing.Optional[bool] = ..., riseOffset: typing.Optional[typing.Union[int, float, numbers.Number]] = ..., shadowPane: typing.Optional[str] = ..., autoPanOnFocus: typing.Optional[bool] = ..., draggable: typing.Optional[bool] = ..., autoPan: typing.Optional[bool] = ..., autoPanPadding: typing.Optional[typing.Sequence[typing.Union[int, float, numbers.Number]]] = ..., autoPanSpeed: typing.Optional[typing.Union[int, float, numbers.Number]] = ..., iconOptions: typing.Optional[IconOptions] = ..., id: typing.Optional[typing.Union[str, dict]] = ..., loading_state: typing.Optional[dict] = ..., eventHandlers: typing.Optional[dict] = ..., disableDefaultEventHandlers: typing.Optional[bool] = ..., n_clicks: typing.Optional[typing.Union[int, float, numbers.Number]] = ..., clickData: typing.Optional[ClickData] = ..., n_dblclicks: typing.Optional[typing.Union[int, float, numbers.Number]] = ..., dblclickData: typing.Optional[DblclickData] = ..., **kwargs) -> None:
        ...
    


