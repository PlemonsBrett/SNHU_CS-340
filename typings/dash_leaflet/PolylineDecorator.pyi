"""
This type stub file was generated by pyright.
"""

import typing
import numbers
from typing_extensions import TypedDict
from dash.development.base_component import Component, ComponentType, _explicitize_args

class PolylineDecorator(Component):
    """A PolylineDecorator component.
Polyline is a wrapper of Polyline in react-leaflet. It takes similar properties to its react-leaflet counterpart.

Keyword arguments:

- children (a list of or a singular dash component, string or number; optional):
    The children of this component. If positions are not specified, an
    attempt is made to read them from the children property. In this
    case, the children must be a single PolyLine or a single Polygon.

- id (string; optional):
    Unique ID to identify this component in Dash callbacks.

- clickData (dict; optional):
    An object holding data related to the click event. Typing is
    indicative.

    `clickData` is a dict with keys:

    - latlng (list of numbers; required)

    - layerPoint (list of numbers; required)

    - containerPoint (list of numbers; required)

- dblclickData (dict; optional):
    An object holding data related to the double click event. Typing
    is indicative.

    `dblclickData` is a dict with keys:

    - latlng (list of numbers; required)

    - layerPoint (list of numbers; required)

    - containerPoint (list of numbers; required)

- disableDefaultEventHandlers (boolean; optional):
    If set to True, default events handlers are not registered.
    [MUTABLE].

- eventHandlers (dict; optional):
    Object with keys specifying the event type and the value the
    corresponding event handlers. [MUTABLE].

- loading_state (dict; optional):
    Dash loading state information.

- n_clicks (number; optional):
    An integer that represents the number of times that this element
    has been clicked on.

- n_dblclicks (number; optional):
    An integer that represents the number of times that this element
    has been double-clicked on.

- patterns (list of dicts; required):
    List of patterns to be added.

    `patterns` is a list of dicts with keys:

    - offset (string; required)

    - endOffset (string; required)

    - repeat (string; required)

    - dash (dict; required)

        `dash` is a dict with keys:

        - pixelSize (number; required)

        - pathOptions (dict; required)

    - arrowHead (dict; required)

        `arrowHead` is a dict with keys:

        - polygon (boolean; required)

        - pixelSize (number; required)

        - headAngle (number; required)

        - pathOptions (dict; required)

    - marker (dict; required)

        `marker` is a dict with keys:

        - markerOptions (dict; required)

        - rotate (boolean; required)

- positions (list of list of numberss | list of list of list of numbersss; optional):
    An array of geographical points (lat, lon)."""
    _children_props = ...
    _base_nodes = ...
    _namespace = ...
    _type = ...
    PatternsDash = TypedDict("PatternsDash", { "pixelSize": typing.Union[int, float, numbers.Number],"pathOptions": dict })
    PatternsArrowHead = TypedDict("PatternsArrowHead", { "polygon": bool,"pixelSize": typing.Union[int, float, numbers.Number],"headAngle": typing.Union[int, float, numbers.Number],"pathOptions": dict })
    PatternsMarker = TypedDict("PatternsMarker", { "markerOptions": dict,"rotate": bool })
    Patterns = TypedDict("Patterns", { "offset": str,"endOffset": str,"repeat": str,"dash": "PatternsDash","arrowHead": "PatternsArrowHead","marker": "PatternsMarker" })
    ClickData = TypedDict("ClickData", { "latlng": typing.Sequence[typing.Union[int, float, numbers.Number]],"layerPoint": typing.Sequence[typing.Union[int, float, numbers.Number]],"containerPoint": typing.Sequence[typing.Union[int, float, numbers.Number]] })
    DblclickData = TypedDict("DblclickData", { "latlng": typing.Sequence[typing.Union[int, float, numbers.Number]],"layerPoint": typing.Sequence[typing.Union[int, float, numbers.Number]],"containerPoint": typing.Sequence[typing.Union[int, float, numbers.Number]] })
    @_explicitize_args
    def __init__(self, children: typing.Optional[typing.Union[str, int, float, ComponentType, typing.Sequence[typing.Union[str, int, float, ComponentType]]]] = ..., positions: typing.Optional[typing.Union[typing.Sequence[typing.Sequence[typing.Union[int, float, numbers.Number]]], typing.Sequence[typing.Sequence[typing.Sequence[typing.Union[int, float, numbers.Number]]]]]] = ..., patterns: typing.Optional[typing.Sequence[Patterns]] = ..., id: typing.Optional[typing.Union[str, dict]] = ..., loading_state: typing.Optional[dict] = ..., eventHandlers: typing.Optional[dict] = ..., disableDefaultEventHandlers: typing.Optional[bool] = ..., n_clicks: typing.Optional[typing.Union[int, float, numbers.Number]] = ..., clickData: typing.Optional[ClickData] = ..., n_dblclicks: typing.Optional[typing.Union[int, float, numbers.Number]] = ..., dblclickData: typing.Optional[DblclickData] = ..., **kwargs) -> None:
        ...
    


