"""
This type stub file was generated by pyright.
"""

import typing
from typing_extensions import Literal
from dash.development.base_component import Component, ComponentType, _explicitize_args

class Row(Component):
    """A Row component.
Row is one of the core layout components in Bootstrap. Build up your layout as a
series of rows of columns. Row has arguments for controlling the vertical and
horizontal alignment of its children, as well as the spacing between columns.

Keyword arguments:

- children (a list of or a singular dash component, string or number; optional):
    The children of the Row.

- id (string; optional):
    The ID of the Row.

- class_name (string; optional):
    Additional CSS classes to apply to the Row.

- align (a value equal to: 'start', 'center', 'end', 'stretch', 'baseline'; optional):
    Set vertical alignment of columns in this row. Options are
    'start', 'center', 'end', 'stretch' and 'baseline'.

- justify (a value equal to: 'start', 'center', 'end', 'around', 'between', 'evenly'; optional):
    Set horizontal spacing and alignment of columns in this row.
    Options are 'start', 'center', 'end', 'around' and 'between'.

- key (string; optional):
    A unique identifier for the component, used to improve performance
    by React.js while rendering components  See
    https://react.dev/learn/rendering-lists#why-does-react-need-keys
    for more info.

- className (string; optional):
    **DEPRECATED** Use `class_name` instead.  Additional CSS classes
    to apply to the Row."""
    _children_props = ...
    _base_nodes = ...
    _namespace = ...
    _type = ...
    @_explicitize_args
    def __init__(self, children: typing.Optional[typing.Union[str, int, float, ComponentType, typing.Sequence[typing.Union[str, int, float, ComponentType]]]] = ..., id: typing.Optional[typing.Union[str, dict]] = ..., *, style: typing.Optional[typing.Any] = ..., class_name: typing.Optional[str] = ..., align: typing.Optional[Literal["start", "center", "end", "stretch", "baseline"]] = ..., justify: typing.Optional[Literal["start", "center", "end", "around", "between", "evenly"]] = ..., key: typing.Optional[str] = ..., className: typing.Optional[str] = ..., **kwargs) -> None:
        ...
    


