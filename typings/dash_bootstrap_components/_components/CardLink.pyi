"""
This type stub file was generated by pyright.
"""

import typing
import numbers
from dash.development.base_component import Component, ComponentType, _explicitize_args

class CardLink(Component):
    """A CardLink component.
Use card link to add consistently styled links to your cards. Links can be
used like buttons, external links, or internal Dash style links.

Keyword arguments:

- id (string; optional):
    The ID of the CardLink.

- children (a list of or a singular dash component, string or number; optional):
    The children of this CardLink.

- href (string; optional):
    URL of the resource to link to.

- external_link (boolean; optional):
    If True, clicking on the CardLink will behave like a hyperlink. If
    False, the CardLink will behave like a dcc.Link component, and can
    be used in conjunction with dcc.Location for navigation within a
    Dash app.

- n_clicks (number; default 0):
    The number of times the CardLink has been clicked.

- class_name (string; optional):
    Additional CSS classes to apply to the CardLink.

- target (string; optional):
    Target attribute to pass on to the link. Only applies to external
    links.

- disabled (boolean; optional):
    If True, the link is disabled and can't be clicked on.

- key (string; optional):
    A unique identifier for the component, used to improve performance
    by React.js while rendering components  See
    https://react.dev/learn/rendering-lists#why-does-react-need-keys
    for more info.

- className (string; optional):
    **DEPRECATED** Use `class_name` instead.  Additional CSS classes
    to apply to the CardLink."""
    _children_props = ...
    _base_nodes = ...
    _namespace = ...
    _type = ...
    @_explicitize_args
    def __init__(self, children: typing.Optional[typing.Union[str, int, float, ComponentType, typing.Sequence[typing.Union[str, int, float, ComponentType]]]] = ..., id: typing.Optional[typing.Union[str, dict]] = ..., *, href: typing.Optional[str] = ..., external_link: typing.Optional[bool] = ..., n_clicks: typing.Optional[typing.Union[int, float, numbers.Number]] = ..., style: typing.Optional[typing.Any] = ..., class_name: typing.Optional[str] = ..., target: typing.Optional[str] = ..., disabled: typing.Optional[bool] = ..., key: typing.Optional[str] = ..., className: typing.Optional[str] = ..., **kwargs) -> None:
        ...
    


