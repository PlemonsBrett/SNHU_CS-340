"""
This type stub file was generated by pyright.
"""

import typing
from typing_extensions import Literal
from dash.development.base_component import Component, ComponentType, _explicitize_args

class DropdownMenu(Component):
    """A DropdownMenu component.
DropdownMenu creates an overlay useful for grouping together links and other
content to organise navigation or other interactive elements.

Keyword arguments:

- children (a list of or a singular dash component, string or number; optional):
    The children of the DropdownMenu.

- id (string; optional):
    The ID of the DropdownMenu.

- label (a list of or a singular dash component, string or number; optional):
    Label for the DropdownMenu toggle.

- color (string; optional):
    Set the color of the DropdownMenu toggle. Available options are:
    'primary', 'secondary', 'success', 'warning', 'danger', 'info',
    'link' or any valid CSS color of your choice (e.g. a hex code, a
    decimal code or a CSS color name).  Default: 'primary'.

- direction (a value equal to: 'down', 'start', 'up', 'end'; optional):
    Direction in which to expand the DropdownMenu. Options are 'down',
    'start', 'up' and 'end'.  Default: 'down'.

- size (a value equal to: 'sm', 'md', 'lg'; optional):
    Size of the DropdownMenu. 'sm' corresponds to small, 'md' to
    medium and 'lg' to large.

- disabled (boolean; default False):
    Disable the dropdown.

- class_name (string; optional):
    Additional CSS classes to apply to the DropdownMenu.

- align_end (boolean; optional):
    Align the DropdownMenu along the right side of its parent.
    Default: False.

- in_navbar (boolean; optional):
    Set this to True if the DropdownMenu is inside a navbar. Default:
    False.

- nav (boolean; optional):
    Set this to True if the DropdownMenu is inside a nav for styling
    consistent with other nav items. Default: False.

- caret (boolean; default True):
    Add a caret to the DropdownMenu toggle. Default: True.

- menu_variant (a value equal to: 'light', 'dark'; default 'light'):
    Set `menu_variant=\"dark\"` to create a dark-mode drop down
    instead.

- group (boolean; optional):
    Set group to True if the DropdownMenu is inside a ButtonGroup.

- toggle_style (dict; optional):
    Additional inline CSS styles to apply to the DropdownMenu toggle.

- toggle_class_name (string; optional):
    Additional CSS classes to apply to the DropdownMenu.

- key (string; optional):
    A unique identifier for the component, used to improve performance
    by React.js while rendering components  See
    https://react.dev/learn/rendering-lists#why-does-react-need-keys
    for more info.

- className (string; optional):
    **DEPRECATED** Use `class_name` instead.  Additional CSS classes
    to apply to the DropdownMenu.

- toggleClassName (string; optional):
    **DEPRECATED** Use `toggle_class_name` instead.  Additional CSS
    classes to apply to the DropdownMenu The classes specified with
    this prop will be applied to the DropdownMenu toggle."""
    _children_props = ...
    _base_nodes = ...
    _namespace = ...
    _type = ...
    @_explicitize_args
    def __init__(self, children: typing.Optional[typing.Union[str, int, float, ComponentType, typing.Sequence[typing.Union[str, int, float, ComponentType]]]] = ..., id: typing.Optional[typing.Union[str, dict]] = ..., *, label: typing.Optional[typing.Union[str, int, float, ComponentType, typing.Sequence[typing.Union[str, int, float, ComponentType]]]] = ..., color: typing.Optional[str] = ..., direction: typing.Optional[Literal["down", "start", "up", "end"]] = ..., size: typing.Optional[Literal["sm", "md", "lg"]] = ..., disabled: typing.Optional[bool] = ..., style: typing.Optional[typing.Any] = ..., class_name: typing.Optional[str] = ..., align_end: typing.Optional[bool] = ..., in_navbar: typing.Optional[bool] = ..., nav: typing.Optional[bool] = ..., caret: typing.Optional[bool] = ..., menu_variant: typing.Optional[Literal["light", "dark"]] = ..., group: typing.Optional[bool] = ..., toggle_style: typing.Optional[dict] = ..., toggle_class_name: typing.Optional[str] = ..., key: typing.Optional[str] = ..., className: typing.Optional[str] = ..., toggleClassName: typing.Optional[str] = ..., **kwargs) -> None:
        ...
    


