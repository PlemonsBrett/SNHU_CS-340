"""
This type stub file was generated by pyright.
"""

import typing
from dash.development.base_component import Component, ComponentType, _explicitize_args

class ListGroup(Component):
    """A ListGroup component.
Bootstrap list groups are a flexible way to display a series of content. Use
in conjunction with `ListGroupItem`, `ListGroupItemHeading` and
`ListGroupItemText`.

Keyword arguments:

- children (a list of or a singular dash component, string or number; optional):
    The children of the ListGroup.

- id (string; optional):
    The ID of the ListGroup.

- numbered (boolean; default False):
    Generate numbered list items.

- horizontal (boolean | string; optional):
    Set to True for a horizontal ListGroup, or supply one of the
    breakpoints as a string for a ListGroup that is horizontal at that
    breakpoint and up.  Note that horizontal ListGroups cannot be
    combined with flush ListGroups, so if flush is True then
    horizontal has no effect.

- flush (boolean; optional):
    When True the `list-group-flush` class is applied which removes
    some borders and rounded corners from the list group in order that
    they can be rendered edge-to-edge in the parent container (e.g. a
    Card).

- class_name (string; optional):
    Additional CSS classes to apply to the ListGroup.

- tag (string; default 'ul'):
    HTML tag to use for the list, default: ul.

- key (string; optional):
    A unique identifier for the component, used to improve performance
    by React.js while rendering components  See
    https://react.dev/learn/rendering-lists#why-does-react-need-keys
    for more info.

- className (string; optional):
    **DEPRECATED** Use `class_name` instead.  Additional CSS classes
    to apply to the ListGroup."""
    _children_props = ...
    _base_nodes = ...
    _namespace = ...
    _type = ...
    @_explicitize_args
    def __init__(self, children: typing.Optional[typing.Union[str, int, float, ComponentType, typing.Sequence[typing.Union[str, int, float, ComponentType]]]] = ..., id: typing.Optional[typing.Union[str, dict]] = ..., *, numbered: typing.Optional[bool] = ..., horizontal: typing.Optional[typing.Union[bool, str]] = ..., flush: typing.Optional[bool] = ..., style: typing.Optional[typing.Any] = ..., class_name: typing.Optional[str] = ..., tag: typing.Optional[str] = ..., key: typing.Optional[str] = ..., className: typing.Optional[str] = ..., **kwargs) -> None:
        ...
    


