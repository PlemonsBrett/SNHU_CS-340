"""
This type stub file was generated by pyright.
"""

import typing
import numbers
from typing_extensions import Literal
from dash.development.base_component import Component, _explicitize_args

class Pagination(Component):
    """A Pagination component.
The container for presentational components for building a pagination UI.
Individual pages should be added as children using the `PaginationItem`
component.

Keyword arguments:

- id (string; optional):
    The ID of the Pagination.

- active_page (number; default 1):
    The currently active page.

- min_value (number; default 1):
    Minimum (leftmost) value to appear in the pagination.

- max_value (number; required):
    Maximum (rightmost) value to appear in the pagination. Must be
    defined. If the `min_value` and `step` together cannot reach this
    value, then the next stepped value is used as the maximum.

- step (number; default 1):
    Page increment step.

- size (a value equal to: 'sm', 'lg'; optional):
    Set the size of all page items in the Pagination.

- fully_expanded (boolean; default True):
    When True, this will display all numbers between `min_value` and
    `max_value`.

- previous_next (boolean; default False):
    When True, this will display a previous and next icon before and
    after the individual page numbers.

- first_last (boolean; default False):
    When True, this will display a first and last icon at the
    beginning and end of the Pagination.

- class_name (string; optional):
    Additional CSS classes to apply to the Pagination.

- className (string; optional):
    **DEPRECATED** - Use class_name instead.  Additional CSS classes
    to apply to the Pagination."""
    _children_props = ...
    _base_nodes = ...
    _namespace = ...
    _type = ...
    @_explicitize_args
    def __init__(self, id: typing.Optional[typing.Union[str, dict]] = ..., *, active_page: typing.Optional[typing.Union[int, float, numbers.Number]] = ..., min_value: typing.Optional[typing.Union[int, float, numbers.Number]] = ..., max_value: typing.Optional[typing.Union[int, float, numbers.Number]] = ..., step: typing.Optional[typing.Union[int, float, numbers.Number]] = ..., size: typing.Optional[Literal["sm", "lg"]] = ..., fully_expanded: typing.Optional[bool] = ..., previous_next: typing.Optional[bool] = ..., first_last: typing.Optional[bool] = ..., style: typing.Optional[typing.Any] = ..., class_name: typing.Optional[str] = ..., className: typing.Optional[str] = ..., **kwargs) -> None:
        ...
    


