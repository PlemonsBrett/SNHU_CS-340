"""
This type stub file was generated by pyright.
"""

import typing
import numbers
from typing_extensions import Literal
from dash.development.base_component import Component, ComponentType, _explicitize_args

class RadioButton(Component):
    """A RadioButton component.
Render a single radio button.

Keyword arguments:

- id (string; optional):
    The ID of the RadioButton.

- value (boolean; default False):
    The value of the input.

- disabled (boolean; default False):
    Disable the RadioButton.

- class_name (string; optional):
    CSS classes to apply to the container (div).

- input_style (dict; optional):
    Inline CSS styles to apply to the <input> element.

- input_class_name (string; optional):
    Additional CSS classes to apply to the <input> element.

- label (a list of or a singular dash component, string or number; optional):
    The label of the <input> element.

- label_id (string; optional):
    The id of the label.

- label_style (dict; optional):
    Additional inline CSS styles to add to the label.

- label_class_name (string; optional):
    Additional CSS classes to apply to the label.

- name (string; optional):
    The name of the control, which is submitted with the form data.

- persistence (boolean | string | number; optional):
    Used to allow user interactions to be persisted when the page is
    refreshed. See https://dash.plotly.com/persistence for more
    details.

- persisted_props (list of a value equal to: 'value's; optional):
    Properties whose user interactions will persist after refreshing
    the component or the page. Since only `value` is allowed this prop
    can normally be ignored.

- persistence_type (a value equal to: 'local', 'session', 'memory'; optional):
    Where persisted user changes will be stored: - memory: only kept
    in memory, reset on page refresh. - local: window.localStorage,
    data is kept after the browser quit. - session:
    window.sessionStorage, data is cleared once the browser quit.

- className (string; optional):
    **DEPRECATED** Use `class_name` instead.  Additional CSS classes
    to apply to the container div.

- inputStyle (dict; optional):
    **DEPRECATED** Use `input_style` instead.  Additional inline CSS
    styles to apply to the <input> element.

- inputClassName (string; optional):
    **DEPRECATED** Use `input_class_name` instead.  Additional CSS
    classes to apply to the <input> element.

- labelStyle (dict; optional):
    **DEPRECATED** Use `label_style` instead.  Additional inline CSS
    styles to add to the label.

- labelClassName (string; optional):
    **DEPRECATED** Use `label_class_name` instead.  Additional CSS
    classes to apply to the label."""
    _children_props = ...
    _base_nodes = ...
    _namespace = ...
    _type = ...
    @_explicitize_args
    def __init__(self, id: typing.Optional[typing.Union[str, dict]] = ..., *, value: typing.Optional[bool] = ..., disabled: typing.Optional[bool] = ..., class_name: typing.Optional[str] = ..., style: typing.Optional[typing.Any] = ..., input_style: typing.Optional[dict] = ..., input_class_name: typing.Optional[str] = ..., label: typing.Optional[typing.Union[str, int, float, ComponentType, typing.Sequence[typing.Union[str, int, float, ComponentType]]]] = ..., label_id: typing.Optional[str] = ..., label_style: typing.Optional[dict] = ..., label_class_name: typing.Optional[str] = ..., name: typing.Optional[str] = ..., persistence: typing.Optional[typing.Union[bool, str, typing.Union[int, float, numbers.Number]]] = ..., persisted_props: typing.Optional[typing.Sequence[Literal["value"]]] = ..., persistence_type: typing.Optional[Literal["local", "session", "memory"]] = ..., className: typing.Optional[str] = ..., inputStyle: typing.Optional[dict] = ..., inputClassName: typing.Optional[str] = ..., labelStyle: typing.Optional[dict] = ..., labelClassName: typing.Optional[str] = ..., **kwargs) -> None:
        ...
    


